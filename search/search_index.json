{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-ISPyB # ISPyB backend server based on python flask-restx. Dependencies # Python 3.10+ flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Home"},{"location":"#py-ispyb","text":"ISPyB backend server based on python flask-restx.","title":"py-ISPyB"},{"location":"#dependencies","text":"Python 3.10+ flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Dependencies"},{"location":"auth/","text":"py-ISPyB Authentication and authorization system # Plugins # py-ISPyB is using the following authentication plugins, which you can find in pyispyb/app/extension/auth . DummyAuthentication # Provides easy authentication for tests. Permissions listed in the password field are given. KeycloakDBGroupsAuthentication # Provides authentication using keycloak with DB-managed groups. LdapAuthentication # Provides authentication using LDAP users and groups. Implementing new plugins # New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database. Configuration # Authentication plugins to be activated are configured in the auth.yml file like this: AUTH: - keycloak: AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" - ldap: AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=esrf,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=esrf,dc=fr\" - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" Database groups and permissions # Fore some authentication plugins (for instance KeycloakDBGroupsAuthentication ), groups are configured in the database using the following tables: UserGroup Person UserGroup_has_Person For all authentication plugins, permissions are configured in the database using the following tables: UserGroup Permission UserGroup_has_Permission How to authentify # To authentify their requests, users should get a py-ISPyB token. This token is provided by the /auth/login route with POST method and the following parameters in json body: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Then you can authorize your requets using this token in the Authorization header: Bearer YOUR_TOKEN . For example to retrieve proposals use: curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals Authorization dependencies # The following dependencies can be used to manage authentication and authorization rules. permission_required(operator, [permissions]) # Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions proposal_authorisation # Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals session_authorisation # Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"Authentication and authorization"},{"location":"auth/#py-ispyb-authentication-and-authorization-system","text":"","title":"py-ISPyB Authentication and authorization system"},{"location":"auth/#plugins","text":"py-ISPyB is using the following authentication plugins, which you can find in pyispyb/app/extension/auth .","title":"Plugins"},{"location":"auth/#dummyauthentication","text":"Provides easy authentication for tests. Permissions listed in the password field are given.","title":"DummyAuthentication"},{"location":"auth/#keycloakdbgroupsauthentication","text":"Provides authentication using keycloak with DB-managed groups.","title":"KeycloakDBGroupsAuthentication"},{"location":"auth/#ldapauthentication","text":"Provides authentication using LDAP users and groups.","title":"LdapAuthentication"},{"location":"auth/#implementing-new-plugins","text":"New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database.","title":"Implementing new plugins"},{"location":"auth/#configuration","text":"Authentication plugins to be activated are configured in the auth.yml file like this: AUTH: - keycloak: AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" - ldap: AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=esrf,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=esrf,dc=fr\" - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"Configuration"},{"location":"auth/#database-groups-and-permissions","text":"Fore some authentication plugins (for instance KeycloakDBGroupsAuthentication ), groups are configured in the database using the following tables: UserGroup Person UserGroup_has_Person For all authentication plugins, permissions are configured in the database using the following tables: UserGroup Permission UserGroup_has_Permission","title":"Database groups and permissions"},{"location":"auth/#how-to-authentify","text":"To authentify their requests, users should get a py-ISPyB token. This token is provided by the /auth/login route with POST method and the following parameters in json body: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Then you can authorize your requets using this token in the Authorization header: Bearer YOUR_TOKEN . For example to retrieve proposals use: curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals","title":"How to authentify"},{"location":"auth/#authorization-dependencies","text":"The following dependencies can be used to manage authentication and authorization rules.","title":"Authorization dependencies"},{"location":"auth/#permission_requiredoperator-permissions","text":"Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions","title":"permission_required(operator, [permissions])"},{"location":"auth/#proposal_authorisation","text":"Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals","title":"proposal_authorisation"},{"location":"auth/#session_authorisation","text":"Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"session_authorisation"},{"location":"routes/","text":"py-ISPyB routes # Routes documentation # To get a documentation gathering all the available routes, simply open the /docs route. Java ISPyB compatibility # Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Routes"},{"location":"routes/#py-ispyb-routes","text":"","title":"py-ISPyB routes"},{"location":"routes/#routes-documentation","text":"To get a documentation gathering all the available routes, simply open the /docs route.","title":"Routes documentation"},{"location":"routes/#java-ispyb-compatibility","text":"Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Java ISPyB compatibility"},{"location":"run/","text":"How to run py-ispyb # Get project code # Clone py-ISPyB repository Install requirements # You need to have python >= 3.10 Install python dependencies: sudo pip install -r requirements.txt Copy and edit yaml auth configuration file # cp examples/auth.yml auth.yml If you do not have a running ispyb database then you can create one using: examples/pydb_empty.sql Run application # . uvicorn.sh Now you can go to http://localhost:8000/docs and explore py-ispyb via OpenAPI ui. Please see the routes section for more information. For requests use the token in the Authorization header: YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals","title":"Running"},{"location":"run/#how-to-run-py-ispyb","text":"","title":"How to run py-ispyb"},{"location":"run/#get-project-code","text":"Clone py-ISPyB repository","title":"Get project code"},{"location":"run/#install-requirements","text":"You need to have python >= 3.10 Install python dependencies: sudo pip install -r requirements.txt","title":"Install requirements"},{"location":"run/#copy-and-edit-yaml-auth-configuration-file","text":"cp examples/auth.yml auth.yml If you do not have a running ispyb database then you can create one using: examples/pydb_empty.sql","title":"Copy and edit yaml auth configuration file"},{"location":"run/#run-application","text":". uvicorn.sh Now you can go to http://localhost:8000/docs and explore py-ispyb via OpenAPI ui. Please see the routes section for more information. For requests use the token in the Authorization header: YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals","title":"Run application"},{"location":"tests/","text":"py-ispyb tests # Run test # In order to run the test, you need to install tox : pip install tox This command manages the test and linting verification. To tun both of them simply type tox . To run only the test, you can type tox -e py38 . To run only the linters, you can type tox -e flake8 .","title":"Tests"},{"location":"tests/#py-ispyb-tests","text":"","title":"py-ispyb tests"},{"location":"tests/#run-test","text":"In order to run the test, you need to install tox : pip install tox This command manages the test and linting verification. To tun both of them simply type tox . To run only the test, you can type tox -e py38 . To run only the linters, you can type tox -e flake8 .","title":"Run test"}]}