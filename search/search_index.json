{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"py-ISPyB","text":"<p>ISPyB backend server based on python with FastAPI.</p>"},{"location":"#main-dependencies","title":"Main dependencies","text":"<ul> <li>Python 3.10+</li> <li>FastAPI - Web framework</li> <li>SQLAlchemy - Database ORM</li> <li>pydantic - Data validation and settings management</li> <li>MariaDB with an ISPyB database schema</li> <li>ISPyB Database Schema</li> <li>ISPyB Models</li> </ul> <p>Go to the run the app section to see how these dependencies can be satisfied, start exploring and contributing to the project.</p>"},{"location":"auth/","title":"Authentication","text":"<p><code>py-ispyb</code> relies on plugins to handle different methods of authenticating users to the system. There are some mechanisms that are implemented natively like LDAP, keycloak and dummy that can be used out-of-the-box. However, it is worth noting that anyone can write his own plugin.</p> <p>There's a dedicated endpoint that allows to use the different plugins that are installed. This endpoint receives as parameters:</p> <ul> <li>plugin - name of the plugin to be used for authentication, as specified in configuration</li> <li>login (optional)</li> <li>password (optional)</li> <li>token (optional)</li> </ul> <p>Example of the request:</p> <pre><code>curl -X 'POST' \\\n  'http://localhost:8000/ispyb/api/v1/auth/login' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"plugin\": \"dummy\",\n  \"login\": \"test\",\n  \"password\": \"Admin\",\n  \"token\": \"Admin\"\n\n}'\n</code></pre> <p>If the authentication is successful the response will be a json with the following fields:</p> <pre><code>{\n  \"login\": \"test\",\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJncm91cHMiOlsiQWRtaW4iXSwicGVybWlzc2lvbnMiOlsiQWRtaW4iXSwiaWF0IjoxNjUwOTgxNjA5LCJleHAiOjE2NTA5OTk2MDl9.3Iq2lGG5RR6Gebss5qEDdASrEMwCIne2jFhaVqp91m0\",\n  \"permissions\": [\"Admin\"]\n}\n</code></pre>"},{"location":"auth/#authorization","title":"Authorization","text":"<p>For any authentication plugin, permissions are configured in the database using the following tables (with example data):</p> <ul> <li>UserGroup: [Admin, user]</li> <li>Permission: [own_proposals, own_sessions, all_proposals, all_sessions]</li> <li>UserGroup_has_Permission: [{Admin, all_proposals}, {Admin, all_sessions}, {user, own_proposals}, {user, own_sessions}]</li> </ul>"},{"location":"auth/#configure-a-plugin","title":"Configure a plugin","text":"<p>One or more plugin can be enabled at the same time. A configuration file called <code>auth.yml</code> at the root of the project contains their configuration parameters.</p> <p>The next examples shows how to enable the dummy authentication plugin:</p> <pre><code>AUTH:\n  - dummy:\n      ENABLED: true\n      AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\"\n      AUTH_CLASS: \"DummyAuthentication\"\n</code></pre>"},{"location":"auth/#list-of-plugins","title":"List of plugins","text":"<p>py-ISPyB is using the following authentication plugins, which code you can find in <code>pyispyb/app/extension/auth</code>.</p>"},{"location":"auth/#dummyauthentication","title":"DummyAuthentication","text":"<p>Provides easy authentication for <code>tests</code>. Permissions listed in the password field are given.</p> <p>Configuration</p> <pre><code>AUTH:\n  - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\\n      ENABLED: false\n      AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\"\n      AUTH_CLASS: \"DummyAuthentication\"\n</code></pre>"},{"location":"auth/#keycloakdbgroupsauthentication","title":"<code>KeycloakDBGroupsAuthentication</code>","text":"<p>Provides authentication using keycloak with DB-managed groups.</p> <p>Configuration</p> <pre><code>AUTH:\n  ENABLED: true\n  AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\"\n  AUTH_CLASS: \"KeycloakAuthentication\"\n  CONFIG:\n    KEYCLOAK_SERVER_URL: \"your_server\"\n    KEYCLOAK_CLIENT_ID: \"your_client\"\n    KEYCLOAK_REALM_NAME: \"your_realm\"\n    KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\"\n</code></pre>"},{"location":"auth/#ldapauthentication","title":"<code>LdapAuthentication</code>","text":"<p>Provides authentication using LDAP users and groups.</p> <p>Configuration</p> <pre><code>AUTH:\n  - ldap:\n      ENABLED: true\n      AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\"\n      AUTH_CLASS: \"LdapAuthentication\"\n      CONFIG:\n        LDAP_URI: \"ldap://your_ldap\"\n        LDAP_BASE_INTERNAL: \"ou=People,dc=test,dc=fr\"\n        LDAP_BASE_GROUPS: \"ou=Pxwebgroups,dc=test,dc=fr\"\n</code></pre>"},{"location":"auth/#implementing-new-plugins","title":"Implementing new plugins","text":"<p>New plugins should inherit from <code>AbstractAuthentication</code> and override either <code>authenticate_by_login</code> or <code>authenticate_by_token</code> dependning on whether they accept a login / password combination or an authorisation token. Both functions return <code>Person</code> on success. This can be prepopulated with <code>familyName</code>, <code>givenName</code>, and <code>emailAddress</code>, which can be used to auto-create a new <code>Person</code> entry if the option is enabled (disabled by default)</p> <p>For example:</p> <pre><code>from typing import Optional\n\nfrom ispyb import models\n\nfrom .AbstractAuthentication import AbstractAuthentication\n\n\nclass MyAuthentication(AbstractAuthentication):\n    \"\"\"My authentication class.\"\"\"\n\n    def configure(self, config: dict[str, Any]):\n      self._config = config\n\n    def authenticate_by_login(self, login: str, password: str) -&gt; Optional[models.Person]:\n        if ...\n            return models.Person(\n                login=login,\n                familyName=...,\n                givenName=...,\n            )\n        else:\n          logger.exception(\"Something went wrong\")\n</code></pre> <p>Or for token based authentication:</p> <pre><code>from typing import Optional\n\nfrom ispyb import models\n\nfrom .AbstractAuthentication import AbstractAuthentication, AuthType\n\n\nclass MyAuthentication(AbstractAuthentication):\n    \"\"\"My authentication class.\"\"\"\n\n    authentication_type = AuthType.token\n\n    def configure(self, config: dict[str, Any]):\n      self._config = config\n\n    def authenticate_by_token(self, token: str) -&gt; Optional[models.Person]:\n        if ...\n            return models.Person(\n              login=login\n            )\n        else:\n            logger.exception(\"Something went wrong\")\n</code></pre> <p>Plugins can export specific config variables to the UI as well by defining <code>config_export</code>, these properties are made available to the <code>/auth/config</code> endpoint:</p> <pre><code>from typing import Optional\n\nfrom ispyb import models\n\nfrom .AbstractAuthentication import AbstractAuthentication, AuthType\n\n\nclass MyAuthentication(AbstractAuthentication):\n    \"\"\"My authentication class.\"\"\"\n\n    authentication_type = AuthType.token\n    config_export = [\"MY_CONFIG_PROPERTY\"]\n\n    ...\n</code></pre>"},{"location":"authorization/","title":"Proposal(s), Session(s), and related entities","text":"<p>Authorization is applied to all user facing resources in py-ISPyB and different permissions are available to grant users and staff access to entities related to the core of ISPyB. These include but not limited to:</p> <ul> <li>Proposal</li> <li>Protein, Crystal, BLSample, Shipping, LabContact</li> <li>BLSession, DataCollectionGroup, DataCollection</li> </ul> <p>etc ...</p> <p>The authorization rules are applied in four ways:</p>"},{"location":"authorization/#users","title":"Users","text":"<ul> <li>A user can access entities related to a Proposal and the DataCollection(s) in which they are a member of one or more Session(s) [linked via SessionHasPerson]. This is an intrinsic permission and is the default behaviour if the user has no other permissions.</li> <li>A user can access entities related to all Session(s) in a Proposal [linked via ProposalHasPerson]</li> </ul>"},{"location":"authorization/#administrators","title":"Administrators","text":"<ul> <li>An administrator can view all Sessions on a Proposal for specific beamline(s) via a <code>BeamLineGroup</code> permission</li> <li>An administrator can access all Sessions and Proposals via <code>all_proposals</code></li> </ul>"},{"location":"authorization/#beamlinegroups","title":"BeamLineGroups","text":"<p>Beamline groups provide a way to grant access to all Proposals, Sessions and related entities to a set of staff members for a particular group of beamlines.</p> <p>For example:</p> <pre><code>\"beamLineGroups\": [\n    {\n        \"groupName\": \"BL0x\",\n        \"uiGroup\": \"mx\",\n        \"permission\": \"bl0_admin\",\n        \"beamlines\": [\n            {\"beamLineName\": \"BL01\"},\n            {\"beamLineName\": \"BL02\"},\n        ],\n    },\n]\n</code></pre> <p>A staff member with the <code>bl0_admin</code> permission will be able to access Proposal(s) and Session(s) allocated on beamlines <code>BL01</code> and <code>BL02</code>, but not other beamlines. <code>uiGroup</code> specifies how this group should be rendered in the UI.</p>"},{"location":"authorization/#permissions","title":"Permissions","text":"<p>Routes can require a specific permission by using the <code>permission</code> dependency.</p> <pre><code>from pyispyb.dependencies import permission\n\n\n@router.get(\n    \"/path\",\n)\ndef get_something(depends: bool = Depends(permission(\"my_permission\"))):\n    ...\n</code></pre>"},{"location":"authorization/#deprecated-authorization-mechanisms","title":"Deprecated Authorization Mechanisms","text":"<p>These functions are deprecated and currently only used in the legacy API resources. They should not be used for new developments.</p>"},{"location":"authorization/#authorization-dependencies","title":"Authorization dependencies","text":"<p>The following decorators can be used to manage authentication and authorization rules.</p>"},{"location":"authorization/#permission_requiredoperator-permissions","title":"<code>permission_required(operator, [permissions])</code>","text":"<p>Makes the route only accessible to users with the specified permissions.</p> <ul> <li><code>operator</code> is either</li> <li><code>\"any\"</code> User should have any of the specified permissions</li> <li><code>\"all\"</code> User should have all of the specified permissions</li> </ul>"},{"location":"authorization/#proposal_authorisation","title":"<code>proposal_authorisation</code>","text":"<p>Verifies that the user is associated to the requested proposal. To do so, it uses the <code>proposal_id</code> parameter. User must verify any of the following conditions :</p> <ul> <li><code>Person.personId = Proposal.personId</code></li> <li><code>Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId</code></li> <li>has permission <code>all_proposals</code></li> </ul>"},{"location":"authorization/#session_authorisation","title":"<code>session_authorisation</code>","text":"<p>Verifies that the user is associated to the requested session. To do so, it uses the <code>session_id</code> parameter. User must verify any of the following conditions :</p> <ul> <li><code>Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId</code></li> <li><code>BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId</code></li> <li>has permission <code>all_sessions</code></li> </ul>"},{"location":"conf/","title":"Configuration","text":"<p>Configuration is defined through environment variables.</p> <p>Ready-to-run preset are defined under <code>config</code> for the following environments:</p> <ul> <li><code>config/dev.env</code></li> <li><code>config/test.env</code></li> <li><code>config/ci.env</code></li> </ul> <p>These preset are automatically used when the variable <code>ISPYB_ENVIRONMENT</code> is set to any of <code>dev</code>, <code>test</code> or <code>ci</code>. This variable is already set to the proper value in the development and test scripts.</p> <p>If <code>ISPYB_ENVIRONMENT</code> is unset or empty, the default provided in <code>config/.env</code> will be used.</p> <p>Any setting can be overridden by defining the proper variable environment.</p> <p>Here are some examples from the <code>dev</code> environment:</p> <pre><code>SERVICE_NAME=core\n\nAPI_ROOT=/ispyb/api/v1\n\nQUERY_DEBUG=false\n\nJWT_CODING_ALGORITHM=HS256\nTOKEN_EXP_TIME=300\n\nCORS=true\n\nSECRET_KEY=dev_secret\n\nSQLALCHEMY_DATABASE_URI=mysql+mysqlconnector://test:test@127.0.0.1/test\n\nAUTH_CONFIG=auth.yml\n\n</code></pre>"},{"location":"developers/","title":"Developer Notes","text":""},{"location":"developers/#authentication","title":"Authentication","text":"<p>Authentication is generally handled via JSON Web Tokens (JWT) which should be passed in the <code>Authorization</code> header with a value <code>Bearer {token}</code>. Most the of the py-ISPyB resources require a token to be present.</p> <p>In certain situations it is not possible to use a JWT. For example when downloading a file it is not possible to pass an Authorization header. For these situations py-ISPyB provides a one time token system. A one time token can be generated for a particular url and this token can then be used as a query parameter to access the specified url a single time. Unused tokens are expired on a short time scale. A signed url can be generated using the <code>/user/sign</code> resource, and used as so:</p> <pre><code>GET /datacollections/attachments/2?onetime={token}\n</code></pre>"},{"location":"permissions/","title":"Permissions","text":"<p>This is the current list of permissions and what they allow:</p> Permission Type Function manage_options Administration Add and update the database application options view_activity Administration View the activity log manage_groups Administration Add, remove, and update UserGroups manage_perms Administration Add, remove, and update Permissions manage_persons Administration View full Person list uportal_sync Administration Sync proposals from a User Portal all_proposals Administration View all proposals"},{"location":"routes/","title":"py-ISPyB routes","text":""},{"location":"routes/#routes-documentation","title":"Routes documentation","text":"<p>To get a documentation gathering all the available routes, simply open the <code>/docs</code> route.</p> <p>You may also check the automatic generated API documentation (Redoc) at: https://ispyb.github.io/py-ispyb/api/</p>"},{"location":"routes/#java-ispyb-compatibility","title":"Java ISPyB compatibility","text":"<ul> <li>Legacy routes for compatibility with Java ISPyB are available with the prefix <code>/ispyb/api/v1/legacy</code>.</li> <li>To preserve compatibility with Java ISPyB, <code>proposal_id</code> parameters in routes also accept proposal names like MX2007.</li> </ul>"},{"location":"run/","title":"Get Started","text":""},{"location":"run/#how-to-run-py-ispyb","title":"How to run py-ispyb","text":""},{"location":"run/#get-project-code","title":"Get project code","text":"<p>Clone the repository</p> <pre><code># SSH (recommended)\ngit clone git@github.com:ispyb/py-ispyb.git\n\n# HTTPS\ngit clone https://github.com/ispyb/py-ispyb.git\n</code></pre> <p>Recommended IDE is Visual Studio Code, which will automatically get configured when opening the project.</p>"},{"location":"run/#installation","title":"Installation","text":"<p><code>python &gt;= 3.10</code> and <code>pip</code> are required</p> <p>If you need to manage multiple versions of python in your system go to Setup Python</p> <p>Install dependencies:</p> <pre><code># For development and production\npip install -r requirements.txt\n\n# For development only\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"run/#system-requirements","title":"System requirements","text":"<p>For development purposes some packages need to be present on your system. These packages are needed for SALS (Simple Authentication and Security Layer) support, LDAP and MariaDB database development files</p> <ul> <li>For Debian and derivatives:</li> </ul> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y libldap2-dev libsasl2-dev \\\nlibmariadb-dev build-essential\n</code></pre> <ul> <li>For Fedora and derivatives (use <code>yum</code> if you don't have <code>dnf</code>):</li> </ul> <pre><code>sudo dnf update &amp;&amp; sudo dnf install -y openldap-devel mariadb-connector-c-devel \\\npython3-devel\n</code></pre> <p>For Fedora you might also need to create a text file <code>/usr/lib/libldap_r.so</code>, adding only the line <code>INPUT ( libldap.so )</code></p>"},{"location":"run/#setup-python","title":"Setup Python","text":"<p>Virtual environments allows to install and manage different versions of python and dependencies from the system easily.</p>"},{"location":"run/#conda-virtual-environment","title":"Conda virtual environment","text":"<p>Conda is an open source package management system and environment management system. Installation instructions</p> <p>Then set up the environment:</p> <pre><code>conda create -n py-ispyb python=3.10\nconda activate py-ispyb\npip install -r requirements.txt\npip install -r requirements-dev.txt # For development\n</code></pre>"},{"location":"run/#pyenv","title":"pyenv","text":"<p>pyenv lets you easily switch between multiple versions of Python. Installation instrucctions</p> <p>If you are using Ubuntu/Debian, you need the following packages:</p> <pre><code>sudo apt install zlib1g zlib1g-dev libssl-dev libbz2-dev libsqlite3-dev\n</code></pre> <p>Then set up the environment</p> <pre><code>pyenv install 3.10\npyenv global 3.10\npip install -r requirements.txt\npip install -r requirements-dev.txt  # For development\n</code></pre>"},{"location":"run/#configure-py-ispyb","title":"Configure py-ISPyB","text":"<p>Configure authentication (more information in auth section).</p> <pre><code># edit this file to configure authentication\ncp examples/auth.yml auth.yml\n</code></pre> <p>Configuration is provided through environment variables.</p> <ul> <li>Ready-to-run configuration preset is provided for test and development environments.</li> <li>Production needs some further configuration before running (see configuration section).</li> </ul>"},{"location":"run/#setup-database","title":"Setup database","text":""},{"location":"run/#mockup-database","title":"Mockup database","text":"<p>For development and test, a mockup database is available. You can have it up and running easily with <code>docker</code>:</p> <pre><code>sudo docker run -p 3306:3306 --rm --name ispyb-pydb ispyb/ispyb-pydb:latest\n</code></pre> <p>If you have <code>podman</code>, you can replace <code>sudo docker</code> with <code>podman</code> in the command above - no <code>sudo</code> needed.</p>"},{"location":"run/#for-tests","title":"For tests","text":"<p>To run the tests, you need to have the mockup database up and running.</p>"},{"location":"run/#for-development","title":"For development","text":"<p>By default, the development environment will connect to the mockup database. If you want to use a different one, make sure to override it by setting the <code>SQLALCHEMY_DATABASE_URI</code> environment variable.</p>"},{"location":"run/#for-production","title":"For production","text":"<p>Make sure to set the <code>SQLALCHEMY_DATABASE_URI</code> environment variable.</p>"},{"location":"run/#run-application","title":"Run application","text":""},{"location":"run/#tests","title":"Tests","text":"<pre><code>. scripts/test.sh\n</code></pre>"},{"location":"run/#development","title":"Development","text":"<pre><code>. uvicorn.sh\n</code></pre>"},{"location":"run/#production","title":"Production","text":"<p>To simplify production deployment, you can use the docker image built from the <code>Dockerfile</code>:</p> <pre><code>sudo docker build . -t py-ispyb\n</code></pre> <p>To run it, you will need to provide two elements:</p> <ul> <li> <p>A set of configuration variables (at least <code>SECRET_KEY</code> and <code>SQLALCHEMY_DATABASE_URI</code>, defaults are provided for others). This can be set through a <code>.env</code> file (see <code>config/test.env</code> for example) and the <code>--env-file</code> docker option.</p> </li> <li> <p>An authentication configuration file (see <code>examples/auth.yml</code> for example). This should be made available inside the container at the path indicated by the <code>AUTH_CONFIG</code> environment variable (default <code>/config/auth.yml</code>).</p> </li> </ul> <p>Docker run command example:</p> <pre><code>sudo docker run -p 80:80 --env-file ispyb.env --mount type=bind,source=/my_ispyb_auth_config_dir,target=/config --name py-ispyb-prod py-ispyb\n</code></pre>"},{"location":"run/#more-information","title":"More information","text":"<p>Please see the routes section and the authentication and authorization section for more information on how to use py-ispyb.</p>"},{"location":"simulator/","title":"Simulator","text":"<p><code>ispyb.simulate</code> creates a new DataCollection row in the ISPyB database from a simple yaml definition. It creates a data collection, related sample information, and associated shipping entities. It then copies some raw data and associated snapshots (and thumbnails).</p> <p>Simulate a data collection:</p> <pre><code>ispyb.simulate &lt;beamline&gt; &lt;experiment&gt;\nispyb.simulate bm23 energy_scan1\n</code></pre> <p>The simulator will create hierarchically a component (<code>Protein</code>), related <code>BLSample</code> (with intermediate <code>Crystal</code>), and potentially a <code>SubSample</code>, contained within a <code>Container</code>, <code>Dewar</code>, and <code>Shipment</code> belonging to the specified <code>Proposal</code> if they do not already exist with the defined name. Then the simulator creates a <code>DataCollection</code> and <code>DataCollectionGroup</code>, linked to the relevant <code>BLSample</code> and <code>BLSession</code>. If grid info information is specified it will also create an entry in <code>GridInfo</code></p>"},{"location":"simulator/#configuration","title":"Configuration","text":"<p>The configuration file location is defined via the <code>SIMULATE_CONFIG</code> environment variable. An example configuration is available in <code>examples/simulation.yml</code>. The structure and requirements of this file are documented in the example.</p> <p>Each entry in <code>experiments</code> represents a different data collection. The <code>experimentType</code> column relates to a <code>DataCollectionGroup.experimentType</code> entry so must match one of the available types in the database. See experimentTypes for a full list.</p>"},{"location":"simulator/#available-columns-per-table","title":"Available columns per table","text":"<p>The ISPyB tables are large, and as such only a subset of the columns are exposed by this simulator, the most pertinent in order to create usable data collections and associated entries. These are as listed below for each table.</p>"},{"location":"simulator/#component-protein","title":"Component (Protein)","text":"<ul> <li>acronym</li> <li>name</li> <li>sequence</li> <li>density</li> <li>molecularMass</li> <li>description</li> </ul>"},{"location":"simulator/#blsample","title":"BLSample","text":"<ul> <li>name</li> </ul>"},{"location":"simulator/#blsubsample","title":"BLSubSample","text":"<ul> <li>x</li> <li>y</li> <li>x2</li> <li>y2</li> <li>type</li> </ul>"},{"location":"simulator/#datacollection","title":"DataCollection","text":"<ul> <li>imageContainerSubPath</li> <li>numberOfImages</li> <li>wavelength</li> <li>exposureTime</li> <li>xtalSnapshotFullPath1-4</li> </ul>"},{"location":"simulator/#gridinfo","title":"GridInfo","text":"<ul> <li>steps_x</li> <li>steps_y</li> <li>snapshot_offsetXPixel</li> <li>snapshot_offsetYPixel</li> <li>dx_mm</li> <li>dy_mm</li> <li>pixelsPerMicronX</li> <li>pixelsPerMicronY</li> </ul>"},{"location":"simulator/#plugins","title":"Plugins","text":"<p>The simulator can trigger events before and after the data is copied using the <code>ispyb.simulator.before_datacollection</code> and <code>ispyb.simulator.after_datacollection</code> entry points. These are passed just the new <code>DataCollection.dataCollectionId</code>.</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#py-ispyb-tests","title":"py-ispyb tests","text":""},{"location":"tests/#coverage-information","title":"Coverage information","text":"<p>Test coverage information is available at https://app.codecov.io/gh/ispyb/py-ispyb/</p>"},{"location":"tests/#run-test","title":"Run test","text":"<p>In order to run the test, you need to have the test database up and running:</p> <pre><code>sudo docker run -p 3306:3306 -d --rm --name pydb-test ispyb/ispyb-pydb:latest\n</code></pre> <p>Install dev dependencies:</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre> <p>Then, to run the tests, simply type:</p> <pre><code>export ISPYB_ENVIRONMENT=\"test\"\npytest\n</code></pre> <p>To run the linting, type:</p> <pre><code>flake8\n</code></pre> <p>Convenience script to run both of them:</p> <pre><code>. scripts/test.sh\n</code></pre>"},{"location":"upsync/","title":"User Portal Sync","text":"<p>To import/sync User Portal data into py-ISPyB each facility needs to create a specific JSON structure as input for the sync route.</p> <p>Currently, there is a single API route to import a proposal including: sessions, lab contacts, proteins, etc.</p> <p>The API endpoint uses a JSON schema to validate the incoming data.</p>"},{"location":"upsync/#json-schema","title":"JSON schema","text":"<p>To get the current User Portal Sync JSON schema just use the following API route: <code>ispyb/api/v1/openapi.json</code></p> <p>You may find the schema under components -&gt; schemas -&gt; UserPortalProposalSync.</p> <p>Your User Portal application may use the schema to test/validate the input data.</p>"},{"location":"upsync/#syncronize-a-proposal","title":"Syncronize a proposal","text":"<p>To sync a proposal just use the following route: <code>/ispyb/api/v1/webservices/userportalsync/sync_proposal</code></p> <p>You may check more information about the User Portal Sync routes/endpoints at: https://ispyb.github.io/py-ispyb/api/</p> <p>or by running a local version of py-ISPyB and simply opening the <code>/docs</code> route.</p>"},{"location":"upsync/#example-json-data","title":"Example JSON data","text":"<p>You can check for User Portal Sync JSON example data at: https://github.com/ispyb/py-ispyb/tree/master/tests/core/api/data</p>"},{"location":"upsync/#sync-process-details-per-entity","title":"Sync process details per entity","text":"<p>The sync process currently takes into account two options to establish the relation between the User Portal entities and the ISPyB DB, in order to keep backward compatibility with the legacy ISPyB Java API. The externalId field currently present in several ISPyB entities, is a MySQL binary(16) field. A binary(16) field can contain maximum 16 characters. The externalId fields must be properly encoded/decoded when dealing with the DB, and this is not the case with the Java API, since those fields were never used by it.</p> <p>The externalId fields can keep an encoded version of an external primary key or UUID from a User Portal to be able to create an entity link between the User Portal and the ISPyB database.</p> <p>At the time when the legacy Java API is not used anymore, it would be possible to switch exclusively to the externalId fields. </p>"},{"location":"upsync/#person","title":"Person","text":"<p>The Person sync is based on the externalId field or the login field.</p>"},{"location":"upsync/#laboratory","title":"Laboratory","text":"<p>The Laboratory sync is based on the laboratoryExtPk field or the laboratory name and city and country fields.</p>"},{"location":"upsync/#proposal","title":"Proposal","text":"<p>The Proposal sync is based on the externalId field or the proposalCode (Ex: \"MX\") and proposalNumber (Ex: \"3456\")</p>"},{"location":"upsync/#proposal-participants","title":"Proposal participants","text":"<p>Every proposal participant will have a relation within the ProposalHasPerson table and only the first one in the proposal persons list (Ex: the PI/Leader) will be added as personID within the Proposal table.</p>"},{"location":"upsync/#lab-contacts","title":"Lab Contacts","text":"<p>Every entry within the JSON proposal persons list will create/update a lab contact entity in the DB. </p> <p>The Lab Contact sync is based on the cardName field.</p>"},{"location":"upsync/#proteins","title":"Proteins","text":"<p>The Protein sync is based on the externalId field or the acronym field.</p>"},{"location":"upsync/#sessions","title":"Sessions","text":"<p>The Session sync is based on the externalId field or the expSessionPk field.</p>"},{"location":"upsync/#session-participants","title":"Session participants","text":"<p>Every session participant will have a relation within the Session_has_Person table.</p>"}]}