{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-ISPyB # ISPyB backend server based on python with FastAPI. Main dependencies # Python 3.10+ FastAPI - Web framework SQLAlchemy - Database ORM pydantic - Data validation and settings management MariaDB with an ISPyB database schema ISPyB Database Schema ISPyB Models Go to the run the app section to see how these dependencies can be satisfied, start exploring and contributing to the project.","title":"Home"},{"location":"#py-ispyb","text":"ISPyB backend server based on python with FastAPI.","title":"py-ISPyB"},{"location":"#main-dependencies","text":"Python 3.10+ FastAPI - Web framework SQLAlchemy - Database ORM pydantic - Data validation and settings management MariaDB with an ISPyB database schema ISPyB Database Schema ISPyB Models Go to the run the app section to see how these dependencies can be satisfied, start exploring and contributing to the project.","title":"Main dependencies"},{"location":"auth/","text":"Authentication and authorization # Authentication # py-ispyb relies on plugins to handle different methods of authenticating users to the system. There are some mechanisms that are implemented natively like LDAP, keycloak and dummy that can be used out-of-the-box. However, it is worth noting that anyone can write his own plugin. There's a dedicated endpoint that allows to use the different plugins that are installed. This endpoint receives as parameters: plugin - name of the plugin to be used for authentication, as specified in configuration login (optional) password (optional) token (optional) Example of the request: curl -X 'POST' \\ 'http://localhost:8000/ispyb/api/v1/auth/login' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"plugin\": \"dummy\", \"login\": \"test\", \"password\": \"Admin\", \"token\": \"Admin\" }' If the authentication is successful the response will be a json with the following fields: { \"login\": \"test\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJncm91cHMiOlsiQWRtaW4iXSwicGVybWlzc2lvbnMiOlsiQWRtaW4iXSwiaWF0IjoxNjUwOTgxNjA5LCJleHAiOjE2NTA5OTk2MDl9.3Iq2lGG5RR6Gebss5qEDdASrEMwCIne2jFhaVqp91m0\", \"permissions\": [\"Admin\"] } Authorization # For any authentication plugin, permissions are configured in the database using the following tables (with example data): UserGroup : [Admin, user] Permission : [own_proposals, own_sessions, all_proposals, all_sessions] UserGroup_has_Permission : [{Admin, all_proposals}, {Admin, all_sessions}, {user, own_proposals}, {user, own_sessions}] Configure a plugin # One or more plugin can be enabled at the same time. A configuration file called auth.yml at the root of the project contains their configuration parameters. The next examples shows how to enable the dummy authentication plugin: AUTH: - dummy: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" List of plugins # py-ISPyB is using the following authentication plugins, which code you can find in pyispyb/app/extension/auth . DummyAuthentication # Provides easy authentication for tests . Permissions listed in the password field are given. Configuration AUTH: - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ ENABLED: false AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" KeycloakDBGroupsAuthentication # Provides authentication using keycloak with DB-managed groups. Configuration AUTH: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" LdapAuthentication # Provides authentication using LDAP users and groups. Configuration AUTH: - ldap: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=test,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=test,dc=fr\" Implementing new plugins # New plugins should inherit from AbstractAuthentication and override either authenticate_by_login or authenticate_by_token dependning on whether they accept a login / password combination or an authorisation token. Both functions return Person on success. This can be prepopulated with familyName , givenName , and emailAddress , which can be used to auto-create a new Person entry if the option is enabled (disabled by default) For example: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" def configure(self, config: dict[str, Any]): self._config = config def authenticate_by_login(self, login: str, password: str) -> Optional[models.Person]: if ... return models.Person( login=login, familyName=..., givenName=..., ) else: logger.exception(\"Something went wrong\") Or for token based authentication: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication, AuthType class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" authentication_type = AuthType.token def configure(self, config: dict[str, Any]): self._config = config def authenticate_by_token(self, token: str) -> Optional[models.Person]: if ... return models.Person( login=login ) else: logger.exception(\"Something went wrong\") Plugins can export specific config variables to the UI as well by defining config_export , these properties are made available to the /auth/config endpoint: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication, AuthType class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" authentication_type = AuthType.token config_export = [\"MY_CONFIG_PROPERTY\"] ... Authorization dependencies # The following dependencies can be used to manage authentication and authorization rules. permission_required(operator, [permissions]) # Makes the route only accessible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions proposal_authorisation # Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals session_authorisation # Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"Basics"},{"location":"auth/#authentication-and-authorization","text":"","title":"Authentication and authorization"},{"location":"auth/#authentication","text":"py-ispyb relies on plugins to handle different methods of authenticating users to the system. There are some mechanisms that are implemented natively like LDAP, keycloak and dummy that can be used out-of-the-box. However, it is worth noting that anyone can write his own plugin. There's a dedicated endpoint that allows to use the different plugins that are installed. This endpoint receives as parameters: plugin - name of the plugin to be used for authentication, as specified in configuration login (optional) password (optional) token (optional) Example of the request: curl -X 'POST' \\ 'http://localhost:8000/ispyb/api/v1/auth/login' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"plugin\": \"dummy\", \"login\": \"test\", \"password\": \"Admin\", \"token\": \"Admin\" }' If the authentication is successful the response will be a json with the following fields: { \"login\": \"test\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJncm91cHMiOlsiQWRtaW4iXSwicGVybWlzc2lvbnMiOlsiQWRtaW4iXSwiaWF0IjoxNjUwOTgxNjA5LCJleHAiOjE2NTA5OTk2MDl9.3Iq2lGG5RR6Gebss5qEDdASrEMwCIne2jFhaVqp91m0\", \"permissions\": [\"Admin\"] }","title":"Authentication"},{"location":"auth/#authorization","text":"For any authentication plugin, permissions are configured in the database using the following tables (with example data): UserGroup : [Admin, user] Permission : [own_proposals, own_sessions, all_proposals, all_sessions] UserGroup_has_Permission : [{Admin, all_proposals}, {Admin, all_sessions}, {user, own_proposals}, {user, own_sessions}]","title":"Authorization"},{"location":"auth/#configure-a-plugin","text":"One or more plugin can be enabled at the same time. A configuration file called auth.yml at the root of the project contains their configuration parameters. The next examples shows how to enable the dummy authentication plugin: AUTH: - dummy: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"Configure a plugin"},{"location":"auth/#list-of-plugins","text":"py-ISPyB is using the following authentication plugins, which code you can find in pyispyb/app/extension/auth .","title":"List of plugins"},{"location":"auth/#dummyauthentication","text":"Provides easy authentication for tests . Permissions listed in the password field are given. Configuration AUTH: - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ ENABLED: false AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"DummyAuthentication"},{"location":"auth/#keycloakdbgroupsauthentication","text":"Provides authentication using keycloak with DB-managed groups. Configuration AUTH: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\"","title":"KeycloakDBGroupsAuthentication"},{"location":"auth/#ldapauthentication","text":"Provides authentication using LDAP users and groups. Configuration AUTH: - ldap: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=test,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=test,dc=fr\"","title":"LdapAuthentication"},{"location":"auth/#implementing-new-plugins","text":"New plugins should inherit from AbstractAuthentication and override either authenticate_by_login or authenticate_by_token dependning on whether they accept a login / password combination or an authorisation token. Both functions return Person on success. This can be prepopulated with familyName , givenName , and emailAddress , which can be used to auto-create a new Person entry if the option is enabled (disabled by default) For example: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" def configure(self, config: dict[str, Any]): self._config = config def authenticate_by_login(self, login: str, password: str) -> Optional[models.Person]: if ... return models.Person( login=login, familyName=..., givenName=..., ) else: logger.exception(\"Something went wrong\") Or for token based authentication: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication, AuthType class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" authentication_type = AuthType.token def configure(self, config: dict[str, Any]): self._config = config def authenticate_by_token(self, token: str) -> Optional[models.Person]: if ... return models.Person( login=login ) else: logger.exception(\"Something went wrong\") Plugins can export specific config variables to the UI as well by defining config_export , these properties are made available to the /auth/config endpoint: from typing import Optional from ispyb import models from .AbstractAuthentication import AbstractAuthentication, AuthType class MyAuthentication(AbstractAuthentication): \"\"\"My authentication class.\"\"\" authentication_type = AuthType.token config_export = [\"MY_CONFIG_PROPERTY\"] ...","title":"Implementing new plugins"},{"location":"auth/#authorization-dependencies","text":"The following dependencies can be used to manage authentication and authorization rules.","title":"Authorization dependencies"},{"location":"auth/#permission_requiredoperator-permissions","text":"Makes the route only accessible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions","title":"permission_required(operator, [permissions])"},{"location":"auth/#proposal_authorisation","text":"Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals","title":"proposal_authorisation"},{"location":"auth/#session_authorisation","text":"Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"session_authorisation"},{"location":"conf/","text":"Configuration is defined through environment variables. Ready-to-run preset are defined under config for the following environments: config/dev.env config/test.env config/ci.env These preset are automatically used when the variable ISPYB_ENVIRONMENT is set to any of dev , test or ci . This variable is already set to the proper value in the development and test scripts. If ISPYB_ENVIRONMENT is unset or empty, the default provided in config/.env will be used. Any setting can be overridden by defining the proper variable environment. Here are some examples from the dev environment: SERVICE_NAME=core API_ROOT=/ispyb/api/v1 QUERY_DEBUG=false JWT_CODING_ALGORITHM=HS256 TOKEN_EXP_TIME=300 CORS=true SECRET_KEY=dev_secret SQLALCHEMY_DATABASE_URI=mysql+mysqlconnector://test:test@127.0.0.1/test AUTH_CONFIG=auth.yml","title":"Configuration"},{"location":"permissions/","text":"This is the current list of permissions and what they allow: Permission Type Function manage_options Administration Add and update the database application options view_activity Administration View the activity log","title":"Permissions"},{"location":"routes/","text":"py-ISPyB routes # Routes documentation # To get a documentation gathering all the available routes, simply open the /docs route. You may also check the automatic generated API documentation (Redoc) at: https://ispyb.github.io/py-ispyb/api/ Java ISPyB compatibility # Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"About"},{"location":"routes/#py-ispyb-routes","text":"","title":"py-ISPyB routes"},{"location":"routes/#routes-documentation","text":"To get a documentation gathering all the available routes, simply open the /docs route. You may also check the automatic generated API documentation (Redoc) at: https://ispyb.github.io/py-ispyb/api/","title":"Routes documentation"},{"location":"routes/#java-ispyb-compatibility","text":"Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Java ISPyB compatibility"},{"location":"run/","text":"How to run py-ispyb # Get project code # Clone py-ISPyB repository # SSH (recommended) git clone git@github.com:ispyb/py-ispyb.git # HTTPS git clone https://github.com/ispyb/py-ispyb.git Recommended IDE is Visual Studio Code , which will automatically get configured when opening the project. Setup Python # You need to have python >= 3.10 To achieve this easily, you can use a conda virtual environment: See installation instuctions . Then set up the environment: conda create -n py-ispyb python=3.10 conda activate py-ispyb Install requirements # Install required packages For Debian and derivatives: sudo apt-get update && sudo apt-get install -y libldap2-dev libsasl2-dev libmariadb-dev build-essential For Fedora and derivatives (use yum if you don't have dnf ): sudo dnf update && sudo dnf install -y openldap-devel mariadb-connector-c-devel Install python dependencies: # For development and production pip install -r requirements.txt # For development only pip install -r requirements-dev.txt Configure py-ISPyB # Configure authentication (more information in auth section ). # edit this file to configure authentication cp examples/auth.yml auth.yml Configuration is provided through environment variables. Ready-to-run configuration preset is provided for test and development environments. Production needs some further configuration before running (see configuration section ). Setup database # Mockup database # For development and test, a mockup database is available. You can have it up and running easily with docker : sudo docker run -p 3306:3306 --rm --name ispyb-pydb ispyb/ispyb-pydb:latest If you have podman , you can replace sudo docker with podman in the command above - no sudo needed. For tests # To run the tests, you need to have the mockup database up and running. For development # By default, the development environment will connect to the mockup database. If you want to use a different one, make sure to override it by setting the SQLALCHEMY_DATABASE_URI environment variable. For production # Make sure to set the SQLALCHEMY_DATABASE_URI environment variable. Run application # Tests # . scripts/test.sh Development # . uvicorn.sh Production # uvicorn pyispyb.app.main:app More information # Please see the routes section and the authentication and authorization section for more information on how to use py-ispyb.","title":"Get started"},{"location":"run/#how-to-run-py-ispyb","text":"","title":"How to run py-ispyb"},{"location":"run/#get-project-code","text":"Clone py-ISPyB repository # SSH (recommended) git clone git@github.com:ispyb/py-ispyb.git # HTTPS git clone https://github.com/ispyb/py-ispyb.git Recommended IDE is Visual Studio Code , which will automatically get configured when opening the project.","title":"Get project code"},{"location":"run/#setup-python","text":"You need to have python >= 3.10 To achieve this easily, you can use a conda virtual environment: See installation instuctions . Then set up the environment: conda create -n py-ispyb python=3.10 conda activate py-ispyb","title":"Setup Python"},{"location":"run/#install-requirements","text":"Install required packages For Debian and derivatives: sudo apt-get update && sudo apt-get install -y libldap2-dev libsasl2-dev libmariadb-dev build-essential For Fedora and derivatives (use yum if you don't have dnf ): sudo dnf update && sudo dnf install -y openldap-devel mariadb-connector-c-devel Install python dependencies: # For development and production pip install -r requirements.txt # For development only pip install -r requirements-dev.txt","title":"Install requirements"},{"location":"run/#configure-py-ispyb","text":"Configure authentication (more information in auth section ). # edit this file to configure authentication cp examples/auth.yml auth.yml Configuration is provided through environment variables. Ready-to-run configuration preset is provided for test and development environments. Production needs some further configuration before running (see configuration section ).","title":"Configure py-ISPyB"},{"location":"run/#setup-database","text":"","title":"Setup database"},{"location":"run/#mockup-database","text":"For development and test, a mockup database is available. You can have it up and running easily with docker : sudo docker run -p 3306:3306 --rm --name ispyb-pydb ispyb/ispyb-pydb:latest If you have podman , you can replace sudo docker with podman in the command above - no sudo needed.","title":"Mockup database"},{"location":"run/#for-tests","text":"To run the tests, you need to have the mockup database up and running.","title":"For tests"},{"location":"run/#for-development","text":"By default, the development environment will connect to the mockup database. If you want to use a different one, make sure to override it by setting the SQLALCHEMY_DATABASE_URI environment variable.","title":"For development"},{"location":"run/#for-production","text":"Make sure to set the SQLALCHEMY_DATABASE_URI environment variable.","title":"For production"},{"location":"run/#run-application","text":"","title":"Run application"},{"location":"run/#tests","text":". scripts/test.sh","title":"Tests"},{"location":"run/#development","text":". uvicorn.sh","title":"Development"},{"location":"run/#production","text":"uvicorn pyispyb.app.main:app","title":"Production"},{"location":"run/#more-information","text":"Please see the routes section and the authentication and authorization section for more information on how to use py-ispyb.","title":"More information"},{"location":"simulator/","text":"Simulator # ispyb.simulate creates a new DataCollection row in the ISPyB database from a simple yaml definition. It creates a data collection, related sample information, and associated shipping entities. It then copies some raw data and associated snapshots (and thumbnails). Simulate a data collection: ispyb.simulate <beamline> <experiment> ispyb.simulate bm23 energy_scan1 The simulator will create hierarchically a component ( Protein ), related BLSample (with intermediate Crystal ), and potentially a SubSample , contained within a Container , Dewar , and Shipment belonging to the specified Proposal if they do not already exist with the defined name. Then the simulator creates a DataCollection and DataCollectionGroup , linked to the relevant BLSample and BLSession . If grid info information is specified it will also create an entry in GridInfo Configuration # The configuration file location is defined via the SIMULATE_CONFIG environment variable. An example configuration is available in examples/simulation.yml . The structure and requirements of this file are documented in the example. Each entry in experiments represents a different data collection. The experimentType column relates to a DataCollectionGroup.experimentType entry so must match one of the available types in the database. See experimentType s for a full list. Available columns per table # The ISPyB tables are large, and as such only a subset of the columns are exposed by this simulator, the most pertinent in order to create usable data collections and associated entries. These are as listed below for each table. Component (Protein) # acronym name sequence density molecularMass description BLSample # name BLSubSample # x y x2 y2 type DataCollection # imageContainerSubPath numberOfImages wavelength exposureTime xtalSnapshotFullPath1-4 GridInfo # steps_x steps_y snapshot_offsetXPixel snapshot_offsetYPixel dx_mm dy_mm pixelsPerMicronX pixelsPerMicronY Plugins # The simulator can trigger events before and after the data is copied using the ispyb.simulator.before_datacollection and ispyb.simulator.after_datacollection entry points. These are passed just the new DataCollection.dataCollectionId .","title":"Simulator"},{"location":"simulator/#simulator","text":"ispyb.simulate creates a new DataCollection row in the ISPyB database from a simple yaml definition. It creates a data collection, related sample information, and associated shipping entities. It then copies some raw data and associated snapshots (and thumbnails). Simulate a data collection: ispyb.simulate <beamline> <experiment> ispyb.simulate bm23 energy_scan1 The simulator will create hierarchically a component ( Protein ), related BLSample (with intermediate Crystal ), and potentially a SubSample , contained within a Container , Dewar , and Shipment belonging to the specified Proposal if they do not already exist with the defined name. Then the simulator creates a DataCollection and DataCollectionGroup , linked to the relevant BLSample and BLSession . If grid info information is specified it will also create an entry in GridInfo","title":"Simulator"},{"location":"simulator/#configuration","text":"The configuration file location is defined via the SIMULATE_CONFIG environment variable. An example configuration is available in examples/simulation.yml . The structure and requirements of this file are documented in the example. Each entry in experiments represents a different data collection. The experimentType column relates to a DataCollectionGroup.experimentType entry so must match one of the available types in the database. See experimentType s for a full list.","title":"Configuration"},{"location":"simulator/#available-columns-per-table","text":"The ISPyB tables are large, and as such only a subset of the columns are exposed by this simulator, the most pertinent in order to create usable data collections and associated entries. These are as listed below for each table.","title":"Available columns per table"},{"location":"simulator/#component-protein","text":"acronym name sequence density molecularMass description","title":"Component (Protein)"},{"location":"simulator/#blsample","text":"name","title":"BLSample"},{"location":"simulator/#blsubsample","text":"x y x2 y2 type","title":"BLSubSample"},{"location":"simulator/#datacollection","text":"imageContainerSubPath numberOfImages wavelength exposureTime xtalSnapshotFullPath1-4","title":"DataCollection"},{"location":"simulator/#gridinfo","text":"steps_x steps_y snapshot_offsetXPixel snapshot_offsetYPixel dx_mm dy_mm pixelsPerMicronX pixelsPerMicronY","title":"GridInfo"},{"location":"simulator/#plugins","text":"The simulator can trigger events before and after the data is copied using the ispyb.simulator.before_datacollection and ispyb.simulator.after_datacollection entry points. These are passed just the new DataCollection.dataCollectionId .","title":"Plugins"},{"location":"tests/","text":"py-ispyb tests # Coverage information # Test coverage information is available at https://app.codecov.io/gh/ispyb/py-ispyb/ Run test # In order to run the test, you need to have the test database up and running: sudo docker run -p 3306:3306 -d --rm --name pydb-test ispyb/ispyb-pydb:latest Install dev dependencies: pip install -r requirements-dev.txt Then, to run the tests, simply type: export ISPYB_ENVIRONMENT=\"test\" pytest To run the linting, type: flake8 Convenience script to run both of them: . scripts/test.sh","title":"Tests"},{"location":"tests/#py-ispyb-tests","text":"","title":"py-ispyb tests"},{"location":"tests/#coverage-information","text":"Test coverage information is available at https://app.codecov.io/gh/ispyb/py-ispyb/","title":"Coverage information"},{"location":"tests/#run-test","text":"In order to run the test, you need to have the test database up and running: sudo docker run -p 3306:3306 -d --rm --name pydb-test ispyb/ispyb-pydb:latest Install dev dependencies: pip install -r requirements-dev.txt Then, to run the tests, simply type: export ISPYB_ENVIRONMENT=\"test\" pytest To run the linting, type: flake8 Convenience script to run both of them: . scripts/test.sh","title":"Run test"}]}