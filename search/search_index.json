{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-ISPyB # ISPyB backend server based on python flask-restx. Dependencies # Python 3.10+ flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Home"},{"location":"#py-ispyb","text":"ISPyB backend server based on python flask-restx.","title":"py-ISPyB"},{"location":"#dependencies","text":"Python 3.10+ flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Dependencies"},{"location":"auth/","text":"Authentication and authorization # Index # Authentication Authorization Configure the plugins List of plugins DummyAuthentication KeycloakDBGroupsAuthentication LdapAuthentication Implementing new plugins Authorization dependencies Authentication # py-ispyb relies on plugins to handle different methods of authenticating users to the system. There are some mechanisms that are implemented natively like LDAP, keycloak and dummy that can be used out-of-the-box. However, it is worth noting that anyone can write his own plugin. There's a dedicated endpoint that allows to use the different plugins that are installed. This endpoint receives as parameters: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Example of the request: curl -X 'POST' \\ 'http://localhost:8000/ispyb/api/v1/auth/login' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"plugin\": \"dummy\", \"username\": \"test\", \"password\": \"Admin\", \"token\": \"Admin\" }' If the authentication is successful the response will be a json with the following fields: { \"username\": \"test\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJncm91cHMiOlsiQWRtaW4iXSwicGVybWlzc2lvbnMiOlsiQWRtaW4iXSwiaWF0IjoxNjUwOTgxNjA5LCJleHAiOjE2NTA5OTk2MDl9.3Iq2lGG5RR6Gebss5qEDdASrEMwCIne2jFhaVqp91m0\", \"permissions\": [\"Admin\"], \"groups\": [\"Admin\"] } Authorization # For any authentication plugin, permissions are configured in the database using the following tables (with example data): UserGroup : [Admin, user] Permission : [own_proposals, own_sessions, all_proposals, all_sessions] UserGroup_has_Permission : [{Admin, all_proposals}, {Admin, all_sessions}, {user, own_proposals}, {user, own_sessions}] Configure a plugin # One or more plugin can be enabled at the same time. A configuration file called auth.yml at the root of the project contains their configuration parameters. The next examples shows how to enable the dummy authentication plugin: AUTH: - dummy: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" List of plugins # py-ISPyB is using the following authentication plugins, which code you can find in pyispyb/app/extension/auth . DummyAuthentication # Provides easy authentication for tests . Permissions listed in the password field are given. Configuration AUTH: - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ ENABLED: false AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" KeycloakDBGroupsAuthentication # Provides authentication using keycloak with DB-managed groups. Configuration AUTH: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" LdapAuthentication # Provides authentication using LDAP users and groups. Configuration AUTH: - ldap: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=test,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=test,dc=fr\" Implementing new plugins # New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database. Authorization dependencies # The following dependencies can be used to manage authentication and authorization rules. permission_required(operator, [permissions]) # Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions proposal_authorisation # Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals session_authorisation # Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"Authentication and authorization"},{"location":"auth/#authentication-and-authorization","text":"","title":"Authentication and authorization"},{"location":"auth/#index","text":"Authentication Authorization Configure the plugins List of plugins DummyAuthentication KeycloakDBGroupsAuthentication LdapAuthentication Implementing new plugins Authorization dependencies","title":"Index"},{"location":"auth/#authentication","text":"py-ispyb relies on plugins to handle different methods of authenticating users to the system. There are some mechanisms that are implemented natively like LDAP, keycloak and dummy that can be used out-of-the-box. However, it is worth noting that anyone can write his own plugin. There's a dedicated endpoint that allows to use the different plugins that are installed. This endpoint receives as parameters: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Example of the request: curl -X 'POST' \\ 'http://localhost:8000/ispyb/api/v1/auth/login' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"plugin\": \"dummy\", \"username\": \"test\", \"password\": \"Admin\", \"token\": \"Admin\" }' If the authentication is successful the response will be a json with the following fields: { \"username\": \"test\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJncm91cHMiOlsiQWRtaW4iXSwicGVybWlzc2lvbnMiOlsiQWRtaW4iXSwiaWF0IjoxNjUwOTgxNjA5LCJleHAiOjE2NTA5OTk2MDl9.3Iq2lGG5RR6Gebss5qEDdASrEMwCIne2jFhaVqp91m0\", \"permissions\": [\"Admin\"], \"groups\": [\"Admin\"] }","title":"Authentication"},{"location":"auth/#authorization","text":"For any authentication plugin, permissions are configured in the database using the following tables (with example data): UserGroup : [Admin, user] Permission : [own_proposals, own_sessions, all_proposals, all_sessions] UserGroup_has_Permission : [{Admin, all_proposals}, {Admin, all_sessions}, {user, own_proposals}, {user, own_sessions}]","title":"Authorization"},{"location":"auth/#configure-a-plugin","text":"One or more plugin can be enabled at the same time. A configuration file called auth.yml at the root of the project contains their configuration parameters. The next examples shows how to enable the dummy authentication plugin: AUTH: - dummy: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"Configure a plugin"},{"location":"auth/#list-of-plugins","text":"py-ISPyB is using the following authentication plugins, which code you can find in pyispyb/app/extension/auth .","title":"List of plugins"},{"location":"auth/#dummyauthentication","text":"Provides easy authentication for tests . Permissions listed in the password field are given. Configuration AUTH: - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ ENABLED: false AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"DummyAuthentication"},{"location":"auth/#keycloakdbgroupsauthentication","text":"Provides authentication using keycloak with DB-managed groups. Configuration AUTH: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\"","title":"KeycloakDBGroupsAuthentication"},{"location":"auth/#ldapauthentication","text":"Provides authentication using LDAP users and groups. Configuration AUTH: - ldap: ENABLED: true AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=test,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=test,dc=fr\"","title":"LdapAuthentication"},{"location":"auth/#implementing-new-plugins","text":"New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database.","title":"Implementing new plugins"},{"location":"auth/#authorization-dependencies","text":"The following dependencies can be used to manage authentication and authorization rules.","title":"Authorization dependencies"},{"location":"auth/#permission_requiredoperator-permissions","text":"Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions","title":"permission_required(operator, [permissions])"},{"location":"auth/#proposal_authorisation","text":"Verifies that the user is associated to the requested proposal . To do so, it uses the proposal_id parameter. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals","title":"proposal_authorisation"},{"location":"auth/#session_authorisation","text":"Verifies that the user is associated to the requested session . To do so, it uses the session_id parameter. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"session_authorisation"},{"location":"routes/","text":"py-ISPyB routes # Routes documentation # To get a documentation gathering all the available routes, simply open the /docs route. Java ISPyB compatibility # Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Routes"},{"location":"routes/#py-ispyb-routes","text":"","title":"py-ISPyB routes"},{"location":"routes/#routes-documentation","text":"To get a documentation gathering all the available routes, simply open the /docs route.","title":"Routes documentation"},{"location":"routes/#java-ispyb-compatibility","text":"Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Java ISPyB compatibility"},{"location":"run/","text":"How to run py-ispyb # Get project code # Clone py-ISPyB repository Install requirements # You need to have python >= 3.10 Install python dependencies: sudo pip install -r requirements.txt Copy and edit yaml auth configuration file # cp examples/auth.yml auth.yml If you do not have a running ispyb database then you can create one using: examples/pydb_empty.sql Run application # . uvicorn.sh Now you can go to http://localhost:8000/docs and explore py-ispyb via OpenAPI ui. Please see the routes section for more information. For requests use the token in the Authorization header: YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals","title":"Running"},{"location":"run/#how-to-run-py-ispyb","text":"","title":"How to run py-ispyb"},{"location":"run/#get-project-code","text":"Clone py-ISPyB repository","title":"Get project code"},{"location":"run/#install-requirements","text":"You need to have python >= 3.10 Install python dependencies: sudo pip install -r requirements.txt","title":"Install requirements"},{"location":"run/#copy-and-edit-yaml-auth-configuration-file","text":"cp examples/auth.yml auth.yml If you do not have a running ispyb database then you can create one using: examples/pydb_empty.sql","title":"Copy and edit yaml auth configuration file"},{"location":"run/#run-application","text":". uvicorn.sh Now you can go to http://localhost:8000/docs and explore py-ispyb via OpenAPI ui. Please see the routes section for more information. For requests use the token in the Authorization header: YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:8000/ispyb/api/v1/proposals","title":"Run application"},{"location":"tests/","text":"py-ispyb tests # Run test # In order to run the test, you need to have the test database up and running: sudo docker run -p 3306:3306 -d --rm --name pydb-test ispyb/ispyb-pydb:latest Install dev dependencies: pip install -r requirements-dev.txt Then, to run the tests, simply type: pytest To run the linting, type: flake8 Convenience script to run both of them: . scripts/test.sh","title":"Tests"},{"location":"tests/#py-ispyb-tests","text":"","title":"py-ispyb tests"},{"location":"tests/#run-test","text":"In order to run the test, you need to have the test database up and running: sudo docker run -p 3306:3306 -d --rm --name pydb-test ispyb/ispyb-pydb:latest Install dev dependencies: pip install -r requirements-dev.txt Then, to run the tests, simply type: pytest To run the linting, type: flake8 Convenience script to run both of them: . scripts/test.sh","title":"Run test"}]}