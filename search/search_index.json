{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-ISPyB # ISPyB backend server based on python flask-restx. Dependencies # Python 3.5+ / pypy2 flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Home"},{"location":"#py-ispyb","text":"ISPyB backend server based on python flask-restx.","title":"py-ISPyB"},{"location":"#dependencies","text":"Python 3.5+ / pypy2 flask-restx (+ flask ) - Web framework. sqlalchemy (+ flask-sqlalchemy ) - Database ORM. marshmallow - Object serialization. ruamel.yaml - YAML parser/emitter. Go to the run the app section to start exploring and contributing.","title":"Dependencies"},{"location":"auth/","text":"py-ISPyB Authentication and authorization system # Plugins # py-ISPyB is using the following authentication plugins, which you can find in pyispyb/app/extension/auth . DummyAuthentication # Provides easy authentication for tests. Permissions listed in the password field are given. KeycloakDBGroupsAuthentication # Provides authentication using keycloak with DB-managed groups. LdapAuthentication # Provides authentication using LDAP users and groups. Implementing new plugins # New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database. Configuration # Authentication plugins to be activated are configured in the ispyb_core_config.yml file like this: server: AUTH: - keycloak: AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" - ldap: AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=esrf,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=esrf,dc=fr\" - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\" Database groups and permissions # Fore some authentication plugins (for instance KeycloakDBGroupsAuthentication ), groups are configured in the database using the following tables: UserGroup Person UserGroup_has_Person For all authentication plugins, permissions are configured in the database using the following tables: UserGroup Permission UserGroup_has_Permission How to authentify # To authentify their requests, users should get a py-ISPyB token. This token is provided by the /auth/login route with POST method and the following parameters in json body: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Then you can authorize your requets using this token in the Authorization header: Bearer YOUR_TOKEN . For example to retrieve proposals use: curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' -i http://localhost:5000/ispyb/api/v1/proposals Decorators # The following decorators (from pyispyb.app.extensions.auth.decorators ) can be used on the routes to manage authentication and authorization rules. @authentication_required # Makes the route only accesible to authenticated users (no permissions checking). @permission_required(operator, [permissions]) # Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions @proposal_authorization_required # Verifies that the user is associated to the requested proposal . To do so, this decorator uses the proposal_id parameter in the route. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals @session_authorization_required # Verifies that the user is associated to the requested session . To do so, this decorator uses the session_id parameter in the route. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"Authentication and authorization"},{"location":"auth/#py-ispyb-authentication-and-authorization-system","text":"","title":"py-ISPyB Authentication and authorization system"},{"location":"auth/#plugins","text":"py-ISPyB is using the following authentication plugins, which you can find in pyispyb/app/extension/auth .","title":"Plugins"},{"location":"auth/#dummyauthentication","text":"Provides easy authentication for tests. Permissions listed in the password field are given.","title":"DummyAuthentication"},{"location":"auth/#keycloakdbgroupsauthentication","text":"Provides authentication using keycloak with DB-managed groups.","title":"KeycloakDBGroupsAuthentication"},{"location":"auth/#ldapauthentication","text":"Provides authentication using LDAP users and groups.","title":"LdapAuthentication"},{"location":"auth/#implementing-new-plugins","text":"New plugins should implement one of the two following classes : AbstractAuthentication : plugin should override get_user_and_groups(self, username, password, token) method and return a tuple (username, groups[]) AbstractDBGroupsAuthentication : plugin should override get_person(self, username, password, token) method and return a pyispyb.core.models.Person object. Groups managment is delegated to ISPyB database.","title":"Implementing new plugins"},{"location":"auth/#configuration","text":"Authentication plugins to be activated are configured in the ispyb_core_config.yml file like this: server: AUTH: - keycloak: AUTH_MODULE: \"pyispyb.app.extensions.auth.KeycloakDBGroupsAuthentication\" AUTH_CLASS: \"KeycloakDBGroupsAuthentication\" CONFIG: KEYCLOAK_SERVER_URL: \"your_server\" KEYCLOAK_CLIENT_ID: \"your_client\" KEYCLOAK_REALM_NAME: \"your_realm\" KEYCLOAK_CLIENT_SECRET_KEY: \"your_secret\" - ldap: AUTH_MODULE: \"pyispyb.app.extensions.auth.LdapAuthentication\" AUTH_CLASS: \"LdapAuthentication\" CONFIG: LDAP_URI: \"ldap://your_ldap\" LDAP_BASE_INTERNAL: \"ou=People,dc=esrf,dc=fr\" LDAP_BASE_EXTERNAL: \"ou=Pxwebgroups,dc=esrf,dc=fr\" - dummy: # /!\\/!\\/!\\ ONLY USE FOR TESTS /!\\/!\\/!\\ AUTH_MODULE: \"pyispyb.app.extensions.auth.DummyAuthentication\" AUTH_CLASS: \"DummyAuthentication\"","title":"Configuration"},{"location":"auth/#database-groups-and-permissions","text":"Fore some authentication plugins (for instance KeycloakDBGroupsAuthentication ), groups are configured in the database using the following tables: UserGroup Person UserGroup_has_Person For all authentication plugins, permissions are configured in the database using the following tables: UserGroup Permission UserGroup_has_Permission","title":"Database groups and permissions"},{"location":"auth/#how-to-authentify","text":"To authentify their requests, users should get a py-ISPyB token. This token is provided by the /auth/login route with POST method and the following parameters in json body: plugin - name of the plugin to be used for authentication, as specified in configuration username (optional) password (optional) token (optional) Then you can authorize your requets using this token in the Authorization header: Bearer YOUR_TOKEN . For example to retrieve proposals use: curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' -i http://localhost:5000/ispyb/api/v1/proposals","title":"How to authentify"},{"location":"auth/#decorators","text":"The following decorators (from pyispyb.app.extensions.auth.decorators ) can be used on the routes to manage authentication and authorization rules.","title":"Decorators"},{"location":"auth/#authentication_required","text":"Makes the route only accesible to authenticated users (no permissions checking).","title":"@authentication_required"},{"location":"auth/#permission_requiredoperator-permissions","text":"Makes the route only accesible to users with the specified permissions . operator is either \"any\" User should have any of the specified permissions \"all\" User should have all of the specified permissions","title":"@permission_required(operator, [permissions])"},{"location":"auth/#proposal_authorization_required","text":"Verifies that the user is associated to the requested proposal . To do so, this decorator uses the proposal_id parameter in the route. User must verify any of the following conditions : Person.personId = Proposal.personId Person.personId = ProposalHasPerson.personId and ProposalHasPerson.proposalId = Proposal.proposalId has permission all_proposals","title":"@proposal_authorization_required"},{"location":"auth/#session_authorization_required","text":"Verifies that the user is associated to the requested session . To do so, this decorator uses the session_id parameter in the route. User must verify any of the following conditions : Person.personId = Session_has_Person.personId and Session_has_Person.sessionId = BLSession.sessionId BLSession.proposalId = Proposal.proposalId and Person.personId = Proposal.personId has permission all_sessions","title":"@session_authorization_required"},{"location":"routes/","text":"py-ISPyB routes # Routes documentation # To get a documentation gathering all the available routes, simply open the /ispyb/api/v1/docs route. Java ISPyB compatibility # Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Routes"},{"location":"routes/#py-ispyb-routes","text":"","title":"py-ISPyB routes"},{"location":"routes/#routes-documentation","text":"To get a documentation gathering all the available routes, simply open the /ispyb/api/v1/docs route.","title":"Routes documentation"},{"location":"routes/#java-ispyb-compatibility","text":"Legacy routes for compatibility with Java ISPyB are available with the prefix /ispyb/api/v1/legacy . To preserve compatibility with Java ISPyB, proposal_id parameters in routes also accept proposal names like MX2007 .","title":"Java ISPyB compatibility"},{"location":"run/","text":"How to run py-ispyb # Get project code # Clone py-ISPyB repository Install requirements # In order to use a MySQL or MariaDB database, you might have to install dev tools: sudo apt-get install -y python3-mysqldb or apt-get install libmariadbclient-dev Install python dependencies: sudo pip install -r requirements.txt Copy and edit yaml configuration file # cp examples/ispyb_core_config_example.yml ispyb_core_config.yml If you do not have a running ispyb database then you can create one by running: scripts/create_core_db.sh Regenerate data base models and schemas # When the database model is updated, you need to genenerate the python model to take it into acount. Please follow these steps: cd scripts ./generate_core_models.sh ../ispyb_core_config.yml python3 generate_core_schemas.py cd .. Run application in dev mode # python3 wsgi.py Now you can go to http://localhost:5000/ispyb/api/v1/docs and explore py-ispyb via swagger ui. Please see the routes section for more information. For requests use the token in the Authorization header: Bearer YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:5000/ispyb/api/v1/proposals Run application in production mode # Production mode is can be run through a docker container. To build the image for this container, run the following with the project root as working directory: sudo docker build -t \"pyispyb\" . This image needs to be provided with a configuration file to be placed in /app/config/ispyb_core_config.yml and will run the webservice on the port 80 . An example of run command can be: sudo docker run --rm -it -p 80:80 -v $(pwd):/app/config pyispyb Webserver logs can be found in /var/log/pyispyb/ .","title":"Running"},{"location":"run/#how-to-run-py-ispyb","text":"","title":"How to run py-ispyb"},{"location":"run/#get-project-code","text":"Clone py-ISPyB repository","title":"Get project code"},{"location":"run/#install-requirements","text":"In order to use a MySQL or MariaDB database, you might have to install dev tools: sudo apt-get install -y python3-mysqldb or apt-get install libmariadbclient-dev Install python dependencies: sudo pip install -r requirements.txt","title":"Install requirements"},{"location":"run/#copy-and-edit-yaml-configuration-file","text":"cp examples/ispyb_core_config_example.yml ispyb_core_config.yml If you do not have a running ispyb database then you can create one by running: scripts/create_core_db.sh","title":"Copy and edit yaml configuration file"},{"location":"run/#regenerate-data-base-models-and-schemas","text":"When the database model is updated, you need to genenerate the python model to take it into acount. Please follow these steps: cd scripts ./generate_core_models.sh ../ispyb_core_config.yml python3 generate_core_schemas.py cd ..","title":"Regenerate data base models and schemas"},{"location":"run/#run-application-in-dev-mode","text":"python3 wsgi.py Now you can go to http://localhost:5000/ispyb/api/v1/docs and explore py-ispyb via swagger ui. Please see the routes section for more information. For requests use the token in the Authorization header: Bearer YOUR_JWT_TOKEN . Please see the authentication and authorization section for more information. For example to retrieve proposals call: curl -X GET -H 'Authorization: Bearer YOUR_JWT_TOKEN' -i http://localhost:5000/ispyb/api/v1/proposals","title":"Run application in dev mode"},{"location":"run/#run-application-in-production-mode","text":"Production mode is can be run through a docker container. To build the image for this container, run the following with the project root as working directory: sudo docker build -t \"pyispyb\" . This image needs to be provided with a configuration file to be placed in /app/config/ispyb_core_config.yml and will run the webservice on the port 80 . An example of run command can be: sudo docker run --rm -it -p 80:80 -v $(pwd):/app/config pyispyb Webserver logs can be found in /var/log/pyispyb/ .","title":"Run application in production mode"},{"location":"tests/","text":"py-ispyb tests # Run test # In order to run the test, you need to install tox : pip install tox This command manages the test and linting verification. To tun both of them simply type tox . To run only the test, you can type tox -e py38 . To run only the linters, you can type tox -e flake8 .","title":"Tests"},{"location":"tests/#py-ispyb-tests","text":"","title":"py-ispyb tests"},{"location":"tests/#run-test","text":"In order to run the test, you need to install tox : pip install tox This command manages the test and linting verification. To tun both of them simply type tox . To run only the test, you can type tox -e py38 . To run only the linters, you can type tox -e flake8 .","title":"Run test"}]}